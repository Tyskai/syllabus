/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 06 13:20:33 GMT 2017
 */

package assessEvosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import assessEvosuite.FlagChecker;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FlagChecker_ESTest extends FlagChecker_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 27 covered goals:
   * Goal 1. assessEvosuite.FlagChecker.assessFlags(DI)V: root-Branch
   * Goal 2. assessEvosuite.FlagChecker.<init>()V: root-Branch
   * Goal 3. assessEvosuite.FlagChecker.check3Flags(DI)V: I17 Branch 1 IFEQ L21 - false
   * Goal 4. assessEvosuite.FlagChecker.check3Flags(DI)V: I27 Branch 2 IFEQ L23 - true
   * Goal 5. assessEvosuite.FlagChecker.check3Flags(DI)V: I48 Branch 5 IFEQ L34 - true
   * Goal 6. assessEvosuite.FlagChecker.check3Flags(DI)V: I59 Branch 6 IFEQ L36 - true
   * Goal 7. assessEvosuite.FlagChecker.check3Flags(DI)V: I70 Branch 7 IFEQ L38 - false
   * Goal 8. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I5 Branch 13 IFGE L71 - false
   * Goal 9. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I9 Branch 14 IFLE L71 - false
   * Goal 10. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: I5 Branch 15 IFGE L79 - true
   * Goal 11. assessEvosuite.FlagChecker.<init>()V: Line 7
   * Goal 12. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 12
   * Goal 13. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 13
   * Goal 14. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 17
   * Goal 15. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 18
   * Goal 16. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 19
   * Goal 17. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 21
   * Goal 18. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 22
   * Goal 19. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 23
   * Goal 20. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 34
   * Goal 21. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 39
   * Goal 22. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 40
   * Goal 23. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 45
   * Goal 24. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 71
   * Goal 25. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 72
   * Goal 26. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: Line 79
   * Goal 27. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: Line 82
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FlagChecker flagChecker0 = new FlagChecker();
      flagChecker0.assessFlags(2.8, (-763));
  }

  //Test case number: 1
  /*
   * 20 covered goals:
   * Goal 1. assessEvosuite.FlagChecker.assessFlags(DI)V: root-Branch
   * Goal 2. assessEvosuite.FlagChecker.<init>()V: root-Branch
   * Goal 3. assessEvosuite.FlagChecker.check3Flags(DI)V: I17 Branch 1 IFEQ L21 - true
   * Goal 4. assessEvosuite.FlagChecker.check3Flags(DI)V: I48 Branch 5 IFEQ L34 - true
   * Goal 5. assessEvosuite.FlagChecker.check3Flags(DI)V: I59 Branch 6 IFEQ L36 - true
   * Goal 6. assessEvosuite.FlagChecker.check3Flags(DI)V: I70 Branch 7 IFEQ L38 - true
   * Goal 7. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I5 Branch 13 IFGE L71 - false
   * Goal 8. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I9 Branch 14 IFLE L71 - true
   * Goal 9. assessEvosuite.FlagChecker.<init>()V: Line 7
   * Goal 10. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 12
   * Goal 11. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 13
   * Goal 12. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 17
   * Goal 13. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 18
   * Goal 14. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 19
   * Goal 15. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 21
   * Goal 16. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 34
   * Goal 17. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 41
   * Goal 18. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 45
   * Goal 19. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 71
   * Goal 20. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 74
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      FlagChecker flagChecker0 = new FlagChecker();
      flagChecker0.assessFlags((-763), (-763));
  }

  //Test case number: 2
  /*
   * 32 covered goals:
   * Goal 1. assessEvosuite.FlagChecker.assessFlags(DI)V: root-Branch
   * Goal 2. assessEvosuite.FlagChecker.<init>()V: root-Branch
   * Goal 3. assessEvosuite.FlagChecker.check3Flags(DI)V: I17 Branch 1 IFEQ L21 - false
   * Goal 4. assessEvosuite.FlagChecker.check3Flags(DI)V: I27 Branch 2 IFEQ L23 - false
   * Goal 5. assessEvosuite.FlagChecker.check3Flags(DI)V: I35 Branch 3 IFEQ L25 - false
   * Goal 6. assessEvosuite.FlagChecker.check3Flags(DI)V: I40 Branch 4 IF_ICMPNE L26 - true
   * Goal 7. assessEvosuite.FlagChecker.check3Flags(DI)V: I48 Branch 5 IFEQ L34 - true
   * Goal 8. assessEvosuite.FlagChecker.check3Flags(DI)V: I59 Branch 6 IFEQ L36 - false
   * Goal 9. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I5 Branch 13 IFGE L71 - false
   * Goal 10. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I9 Branch 14 IFLE L71 - false
   * Goal 11. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: I5 Branch 15 IFGE L79 - false
   * Goal 12. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: I9 Branch 16 IFLE L79 - false
   * Goal 13. assessEvosuite.FlagChecker.<init>()V: Line 7
   * Goal 14. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 12
   * Goal 15. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 13
   * Goal 16. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 17
   * Goal 17. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 18
   * Goal 18. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 19
   * Goal 19. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 21
   * Goal 20. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 22
   * Goal 21. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 23
   * Goal 22. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 24
   * Goal 23. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 25
   * Goal 24. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 26
   * Goal 25. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 34
   * Goal 26. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 37
   * Goal 27. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 38
   * Goal 28. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 45
   * Goal 29. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 71
   * Goal 30. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 72
   * Goal 31. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: Line 79
   * Goal 32. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: Line 80
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      FlagChecker flagChecker0 = new FlagChecker();
      flagChecker0.assessFlags(2.7994, (-474));
  }

  //Test case number: 3
  /*
   * 28 covered goals:
   * Goal 1. assessEvosuite.FlagChecker.assessFlags(DI)V: root-Branch
   * Goal 2. assessEvosuite.FlagChecker.<init>()V: root-Branch
   * Goal 3. assessEvosuite.FlagChecker.check3Flags(DI)V: I17 Branch 1 IFEQ L21 - false
   * Goal 4. assessEvosuite.FlagChecker.check3Flags(DI)V: I27 Branch 2 IFEQ L23 - true
   * Goal 5. assessEvosuite.FlagChecker.check3Flags(DI)V: I48 Branch 5 IFEQ L34 - true
   * Goal 6. assessEvosuite.FlagChecker.check3Flags(DI)V: I59 Branch 6 IFEQ L36 - true
   * Goal 7. assessEvosuite.FlagChecker.check3Flags(DI)V: I70 Branch 7 IFEQ L38 - false
   * Goal 8. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I5 Branch 13 IFGE L71 - false
   * Goal 9. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I9 Branch 14 IFLE L71 - false
   * Goal 10. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: I5 Branch 15 IFGE L79 - false
   * Goal 11. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: I9 Branch 16 IFLE L79 - true
   * Goal 12. assessEvosuite.FlagChecker.<init>()V: Line 7
   * Goal 13. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 12
   * Goal 14. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 13
   * Goal 15. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 17
   * Goal 16. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 18
   * Goal 17. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 19
   * Goal 18. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 21
   * Goal 19. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 22
   * Goal 20. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 23
   * Goal 21. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 34
   * Goal 22. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 39
   * Goal 23. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 40
   * Goal 24. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 45
   * Goal 25. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 71
   * Goal 26. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 72
   * Goal 27. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: Line 79
   * Goal 28. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: Line 82
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      FlagChecker flagChecker0 = new FlagChecker();
      flagChecker0.assessFlags(2.6, 10);
  }

  //Test case number: 4
  /*
   * 32 covered goals:
   * Goal 1. assessEvosuite.FlagChecker.assessFlags(DI)V: root-Branch
   * Goal 2. assessEvosuite.FlagChecker.<init>()V: root-Branch
   * Goal 3. assessEvosuite.FlagChecker.check3Flags(DI)V: I17 Branch 1 IFEQ L21 - false
   * Goal 4. assessEvosuite.FlagChecker.check3Flags(DI)V: I27 Branch 2 IFEQ L23 - false
   * Goal 5. assessEvosuite.FlagChecker.check3Flags(DI)V: I35 Branch 3 IFEQ L25 - false
   * Goal 6. assessEvosuite.FlagChecker.check3Flags(DI)V: I40 Branch 4 IF_ICMPNE L26 - false
   * Goal 7. assessEvosuite.FlagChecker.check3Flags(DI)V: I48 Branch 5 IFEQ L34 - false
   * Goal 8. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I5 Branch 13 IFGE L71 - false
   * Goal 9. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I9 Branch 14 IFLE L71 - false
   * Goal 10. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: I5 Branch 15 IFGE L79 - false
   * Goal 11. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: I9 Branch 16 IFLE L79 - false
   * Goal 12. assessEvosuite.FlagChecker.<init>()V: Line 7
   * Goal 13. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 12
   * Goal 14. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 13
   * Goal 15. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 17
   * Goal 16. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 18
   * Goal 17. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 19
   * Goal 18. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 21
   * Goal 19. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 22
   * Goal 20. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 23
   * Goal 21. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 24
   * Goal 22. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 25
   * Goal 23. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 26
   * Goal 24. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 27
   * Goal 25. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 34
   * Goal 26. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 35
   * Goal 27. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 36
   * Goal 28. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 45
   * Goal 29. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 71
   * Goal 30. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 72
   * Goal 31. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: Line 79
   * Goal 32. assessEvosuite.FlagChecker.isInputInRangeTwo(D)Z: Line 80
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FlagChecker flagChecker0 = new FlagChecker();
      flagChecker0.assessFlags(2.7994, 10);
  }

  //Test case number: 5
  /*
   * 19 covered goals:
   * Goal 1. assessEvosuite.FlagChecker.assessFlags(DI)V: root-Branch
   * Goal 2. assessEvosuite.FlagChecker.<init>()V: root-Branch
   * Goal 3. assessEvosuite.FlagChecker.check3Flags(DI)V: I17 Branch 1 IFEQ L21 - true
   * Goal 4. assessEvosuite.FlagChecker.check3Flags(DI)V: I48 Branch 5 IFEQ L34 - true
   * Goal 5. assessEvosuite.FlagChecker.check3Flags(DI)V: I59 Branch 6 IFEQ L36 - true
   * Goal 6. assessEvosuite.FlagChecker.check3Flags(DI)V: I70 Branch 7 IFEQ L38 - true
   * Goal 7. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: I5 Branch 13 IFGE L71 - true
   * Goal 8. assessEvosuite.FlagChecker.<init>()V: Line 7
   * Goal 9. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 12
   * Goal 10. assessEvosuite.FlagChecker.assessFlags(DI)V: Line 13
   * Goal 11. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 17
   * Goal 12. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 18
   * Goal 13. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 19
   * Goal 14. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 21
   * Goal 15. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 34
   * Goal 16. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 41
   * Goal 17. assessEvosuite.FlagChecker.check3Flags(DI)V: Line 45
   * Goal 18. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 71
   * Goal 19. assessEvosuite.FlagChecker.isInputInRangeOne(D)Z: Line 74
   */

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      FlagChecker flagChecker0 = new FlagChecker();
      flagChecker0.assessFlags(10, 10);
  }
}
